from django.views.generic import CreateView, ListView, UpdateView, DeleteViewfrom django.contrib.auth.decorators import login_requiredfrom django.utils.decorators import method_decoratorfrom django.core.paginator import Paginator, EmptyPage, PageNotAnIntegerfrom django.contrib.messages.views import SuccessMessageMixinfrom core.forms.category_form import CategoryFormfrom core.models.category import Category@method_decorator(login_required(login_url='/login/'), name='dispatch')class CategoryCreateListView(SuccessMessageMixin, CreateView, ListView):    template_name = 'category/category.html'    model = Category    form_class = CategoryForm    success_url = '/category/'    success_message = "Category successfully created!"    paginate_by = 10    context_object_name = 'category'    def get_context_data(self, **kwargs):        context = super(CategoryCreateListView, self).get_context_data(**kwargs)        category = self.get_queryset()        page = self.request.GET.get('page')        paginator = Paginator(category, self.paginate_by)        try:            category = paginator.page(page)        except PageNotAnInteger:            category = paginator.page(1)        except EmptyPage:            category = paginator.page(paginator.num_pages)        context['category'] = category        return context        # return dict(        #     super(CreateCategory, self).get_context_data(**kwargs),        #     category=self.model.objects.all().order_by('-id')        # )@method_decorator(login_required(login_url='/login/'), name='dispatch')class CategoryUpdateView(SuccessMessageMixin, UpdateView):    template_name = 'category/category.html'    success_url = '/category/'    success_message = "Category successfully updated!"    form_class = CategoryForm    def get_object(self, queryset=None):        obj = Category.objects.get(id=self.kwargs['id'])        return obj    def form_valid(self, form):        print(form.cleaned_data)class CategoryDeleteView(DeleteView):    template_name = 'category/category.html'    success_message = "Category deleted successfully!"    def get_object(self, queryset=None):        obj = Category.objects.get(id=self.kwargs['id'])        return obj.delete()